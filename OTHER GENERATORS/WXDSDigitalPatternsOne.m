// ***************************************************************************************
//  WXDSDigitalPatternsOne
//  Created by Paul Webb on Sun Sep 18 2005.
// ***************************************************************************************
#import "WXDSDigitalPatternsOne.h"


@implementation WXDSDigitalPatternsOne

// ************************************************************************************************
-(id)   init
{
if(self=[super init])
	{
	[self setDeltas:1.62636191114421113646 
		d2:0.00000591641978933724 d3:-0.00000001702812595130 
		d4: 1.52534652831449180077 d5:-0.00000002063911918564 every:8];
		
	gainLevel=0.0;	
	patternCount=0;	
	patternMasterGain=0.2;
	[self setMasterPan:0.5];
	[self initParams];
	[self initPatterns];
	
	currentPattern=1;
	patternIndex=0;
	patternLength=[patterns[currentPattern] length];
	patternSpeedRate=3;
	}
return self;
}
// ************************************************************************************************
-(void)			initPatterns
{
patterns[0]=[[NSMutableString alloc]initWithString: @"a-b-acef"];
accents[0]=[[NSMutableString alloc]initWithString:  @"X-x-X-x-"];

patterns[1]=[[NSMutableString alloc]initWithString: @"a+++e+++t+++-c+-a+++d+++t+++-c+-"];
accents[1]=[[NSMutableString alloc]initWithString:  @"X-x-X-x-X-x-X-x-X-x-L-x-X-x-X-x-"];

// use		a d e m n p
// maybe	c f g i k r s t
// okay if extend j k l
}
// a b c d e  f g h i j  k l m n o p q r s t
// ************************************************************************************************
-(void)			setDeltas:(float)d1 d2:(float)d2 d3:(float)d3 d4:(float)d4 d5:(float)d5 every:(int)every
{
delta1=d1;
delta2=d2;
delta3=d3;
delta4=d4;
delta5=d5;

deltaStart1=delta1;
deltaStart2=delta2;
deltaStart4=delta4;

degree1=degree2=0;

resetEvery=every;
resetCount=resetEvery;
}
// ************************************************************************************************
-(void)			initParams
{
float   p1[20][10]=  
	{
	// #0
	{   24476, 
		2.00805473286609803552, 0.00001087768580813631, 0.00000004891550248769, 0.12894065086163036815, 0.00000000322514081770, 
		9, 0.0623719990, 0.0050516003, 0 },
		
	// #1	
	{   195093, 
		2.28075352374914830378, -0.00003013755282797724, 0.00000001961912593341, 1.14080418944649131241, 0.00000001963310439637, 
		5, 0.2667239904, 0.0036482404, 0 },
		
	// #2	
	{   11802, 
		1.62636191114421113646, 0.00000591641978933724, -0.00000001702812595130, 1.52534652831449180077, -0.00000002063911918564, 
		8, 0.8111200333, -0.0048101605, 0 },
		
	// #3	
	{   489380, 
		1.55241694120256878975, -0.00000411432382370103, 0.00000000873693715280, 1.49143727427574224187, -0.00000001689811333476, 
		7, 0.6287760139, -0.0017674400, 0 },
		
	// #4	
	{   800000, 
		1.25193535814491285763, 0.00000806477221914987, -0.00000000911097887232, 1.43530178649730877360, 0.00000000367956828936, 
		2, 0.3581280112, 0.0052572801, 0 },
		
	// #5	
	{   122667, 
		1.59188275367623899292, -0.00001757792084695169, -0.00000006552174110160, 1.01200601444216631286, -0.00000001922374946622, 
		4, 0.2633280158, 0.0009820000, 0 },
		
	// #6	
	{   42095, 
		2.20737845723672876375, -0.00000825297376450616, 0.00000001367276000033, 0.17139845633871972352, -0.00000002560320050354, 
		11, 0.8217520118, -0.0023498000, 0 },
		
	// #7	
	{   72186, 
		1.36620099570405950651, 0.00002743724627882669, 0.00000002212139665980, 0.63914669587323091893, -0.00000000707053856208, 
		3, 0.3717280030, 0.0013161601, 0 },	
	
	// #8	
	{   87042, 
		1.88566797144052844537, 0.00001060030332354371, -0.00000002049330055010, 1.40096510488664272032, -0.00000015099948605985, 
		8, 0.7482440472, -0.0035164801, 1 },						

	// #9
	{   59446, 
		1.88552549558322279921, 0.00001585870254934060, 0.00000000442687312338, 1.55056475505759516764, 0.00000002174077831010, 
		3, 0.7001600266, -0.0041708006, 0 },																									

	// #10
	{   85594, 
		1.97286319611159766119, -0.00000420540095774479, 0.00000001676266949512, 0.78988615290262864654, 0.00000000439756789463, 
		11, 0.0122079998, 0.0019242400, 0 },	

	// #11
	{   365704, 
		1.07669005365894010495, -0.00001029240880534691, -0.00000032387565931957, 0.20146086223021586470, 0.00000000583171140578, 
		4, 0.7943840027, -0.0075925603, 0 },
		
	// #12
	{   61897, 
		1.97756489940268465055, -0.00000331442683592341, 0.00000013873964099994, 0.37243189099701862199, 0.00000000449862905516, 
		8, 0.1272560060, 0.0018212999, 0 },
		
	// #13
	{   148333, 
		1.84249778667691077594, 0.00000784487235113650, 0.00000053573126846947, 1.35850729940955328168, 0.00000002610218724738, 
		5, 0.0434760004, 0.0056646401, 0 },	

	// #14
	{   203213, 
		1.88438568872477740790, -0.00000591310688657307, -0.00000001932322048653, 0.47472955654248888413, -0.00000000352179271859, 
		6, 0.3740560114, 0.0008060800, 0 },
		
	// #15
	{   367504, 
		1.17642315377290840317, -0.00001576321535674086, 0.00000000716354032284, 1.60157111197302448602, -0.00000000972885995603, 
		9, 0.3265520036, 0.0005884001, 0 },
		
	// #16
	{   554157, 
		1.59815169139768831208, 0.00000239861228367655, 0.00000003222636364325, 1.38272819515151690339, 0.00000002935416833004, 
		29, 0.8714760542, -0.0032372002, 0 },	

	// #17
	{   726924, 
		2.22604279454377129710, 0.00000823086108266983, -0.00000001092589560462, 1.70315639823196662839, 0.00000001028487654078, 
		18, 0.8722040057, -0.0016624801, 0 },
		
	// #18
	{   20591, 
		2.06447517235914279610, 0.00000908473047231534, -0.00000001868881294292, 0.15900305675312653708, 0.00000005590511013499, 
		21, 0.0854960009, 0.0004225600, 0 },													

	// #19
	{   113152, 
		2.42935584291896100595, 0.00001531383840056221, 0.00000000287627226664, 0.70639530052150656392, 0.00000013504473029117, 
		2, 0.3457920253, 0.0028568802, 1 }
	};
	
int p,t;
for(t=0;t<20;t++)
	for(p=0;p<10;p++)
		settings[t][p]=p1[t][p];
}
// ************************************************************************************************
-(void)			doPatternChange
{
char c,accent;
float gain;
patternCount++;		
if(patternCount % patternSpeedRate!=0)		return;

c=[patterns[currentPattern] characterAtIndex:patternIndex];
accent=[accents[currentPattern] characterAtIndex:patternIndex];
patternIndex++;
if(patternIndex>=patternLength) patternIndex=0;

if(accent=='L') gain=0.6; else
if(accent=='X') gain=0.4; else
if(accent=='x') gain=0.2; else
if(accent=='-') gain=0.1; 

if(c=='-') [self selectSound:0 gain:0.0]; else  
if(c=='+')  return;
[self selectSound:c-97 gain:gain];  

}
// ************************************************************************************************
-(void)		selectSound:(int)index gain:(float)gain
{
[self setDeltas:settings[index][1] 
	d2:settings[index][2]  d3:settings[index][3]  
	d4:settings[index][4]  d5:settings[index][5]  every:settings[index][6] ];	
	
gainLevel=gain*patternMasterGain;	

doPanShift=settings[index][9];
origPan=settings[index][7];
panShift=settings[index][8];
}
// ************************************************************************************************
-(void)		setPatternGain:(float)g
{
patternMasterGain=g;
}
// ************************************************************************************************
-(void)		setPatternSpeed:(int)v
{
patternSpeedRate=v;
}
// ************************************************************************************************
-(OSStatus)		audioCallbackOnDevice:(AudioBufferList*)ioData bus:(UInt32)bus frame:(UInt32)inNumFrames time:(AudioTimeStamp*)timeStamp
{

if(!isActive) return [self RenderBlank:ioData bus:bus frame:inNumFrames];
UInt32 i;

float* out1 =(float*) ioData->mBuffers[0].mData;
float* out2 =(float*) ioData->mBuffers[1].mData;

out1=out1+preBlankSize*2;
out2=out2+preBlankSize*2;

[self doPatternChange];

resetCount--;
if(resetCount<=0)
	{
	
	resetCount=resetEvery;
	delta1=deltaStart1;
	delta2=deltaStart2;
	delta4=deltaStart4;
	if(doPanShift)
		{
		origPan*=-1.0;
		panShift*=-1.0;
		}
	masterPan=origPan;	
	}

for (i=0; i<inNumFrames; ++i) 
	{
	if(sin(degree1)>sin(degree2)) leftSample=1.0; else leftSample=-1.0;
	
	*out1++ = leftSample*gainLevel*masterPan;
	*out2++ = leftSample*gainLevel*(1.0-masterPan);
	

	degree2+=delta4;
	degree1+=delta1;
	delta1+=delta2;
	delta2+=delta3;
	delta4+=delta5;
	
	masterPan+=panShift;
	if(masterPan>1.0) masterPan=1.0; else
	if(masterPan<0.0) masterPan=0.0; 
	}
	
return noErr;
}
// ************************************************************************************************

@end
